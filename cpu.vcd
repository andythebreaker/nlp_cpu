$date
	Thu Dec 26 23:21:51 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_cpu $end
$var wire 33 ! reg_debug_out [32:0] $end
$var wire 7 " debuger [6:0] $end
$var wire 32 # MEM_OUT [0:31] $end
$var wire 1 $ MEM_CTRL $end
$var wire 12 % MEM_ADDR [11:0] $end
$var wire 12 & INS_ADDR [11:0] $end
$var reg 32 ' INS_MEM [0:31] $end
$var reg 32 ( MEM_IN [0:31] $end
$var reg 1 ) clk $end
$var reg 1 * debug $end
$var reg 1 + rst $end
$var integer 32 , ot_mem [31:0] $end
$var integer 32 - tb_debug [31:0] $end
$scope module cpu $end
$var wire 12 . INS_ADDR [11:0] $end
$var wire 32 / INS_MEM [0:31] $end
$var wire 12 0 MEM_ADDR [11:0] $end
$var wire 1 $ MEM_CTRL $end
$var wire 32 1 MEM_IN [0:31] $end
$var wire 32 2 MEM_OUT [0:31] $end
$var wire 1 ) clk $end
$var wire 1 * debug $end
$var wire 7 3 debuger [6:0] $end
$var wire 33 4 reg_debug_out [32:0] $end
$var wire 1 + rst $end
$var reg 1 5 MEM_C $end
$var reg 12 6 MEM_D [11:0] $end
$var reg 32 7 MEM_O [0:31] $end
$var reg 7 8 debug_r [6:0] $end
$var reg 32 9 ir [31:0] $end
$var reg 12 : pc [11:0] $end
$var reg 5 ; psr [4:0] $end
$var reg 33 < reg_debug_o [32:0] $end
$var reg 33 = result [32:0] $end
$var reg 32 > src1 [31:0] $end
$var reg 32 ? src2 [31:0] $end
$var reg 1 @ temp_checkcond $end
$var integer 32 A i [31:0] $end
$scope function getdst $end
$var reg 32 B getdst [31:0] $end
$var reg 32 C in [31:0] $end
$upscope $end
$scope function getsrc $end
$var reg 32 D getsrc [31:0] $end
$var reg 32 E in [31:0] $end
$upscope $end
$scope function setcondcode $end
$var reg 33 F res [32:0] $end
$var reg 7 G setcondcode [6:0] $end
$upscope $end
$upscope $end
$scope begin always_INS_ADDR $end
$upscope $end
$scope begin always_MEM_ADDR $end
$upscope $end
$scope begin always_MEM_OUT $end
$upscope $end
$scope begin main_loop $end
$upscope $end
$scope begin monitor $end
$upscope $end
$scope begin prog_load $end
$upscope $end
$scope begin stop $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx G
bx F
bx E
bx D
bx C
bx B
bx A
x@
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
x5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
b0 ,
x+
x*
x)
bx (
bx '
bx &
bx %
x$
bx #
bx "
bx !
$end
#1000
b0 9
b0 '
b0 /
b0 (
b0 1
1*
0)
0+
#5000
b1 -
b0 !
b0 4
b0 <
0$
05
0@
b0 #
b0 2
b0 7
b0 %
b0 0
b0 6
b0 &
b0 .
b0 :
b0 ;
b0 =
b0 ?
b0 >
b10000 A
b10 "
b10 3
b10 8
1+
#9000
0+
b1010 ,
#50000
b101000000000000011000000000001 '
b101000000000000011000000000001 /
b11 "
b11 3
b11 8
b1 &
b1 .
b1 :
1)
#100000
b101000000000000011000000000001 9
0)
#150000
bx (
bx 1
b10001000111111111111000000000001 '
b10001000111111111111000000000001 /
b1000 "
b1000 3
b1000 8
b1000 G
b11 F
b11 %
b11 0
b11 6
b10 &
b10 .
b10 :
1)
#200000
b10001000111111111111000000000001 9
0)
#250000
b110000000000000001000000000000 '
b110000000000000001000000000000 /
b10 ;
b110 F
b110 =
b11 ?
b11 B
b10001000111111111111000000000001 C
b111111111111 >
b111111111111 D
b10001000111111111111000000000001 E
b11 &
b11 .
b11 :
1)
#300000
b110000000000000001000000000000 9
0)
#350000
b0 (
b0 1
b10010000000000000000000000000000 '
b10010000000000000000000000000000 /
b110 #
b110 2
b110 7
b0 %
b0 0
b0 6
1$
15
b10 ;
b100 &
b100 .
b100 :
1)
#400000
b10010000000000000000000000000000 9
0)
#450000
b1010 ,
bx '
bx /
b101 "
b101 3
b101 8
b101 &
b101 .
b101 :
0$
05
1)
