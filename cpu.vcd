$date
	Sun Dec 22 15:16:39 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_cpu $end
$var wire 33 ! reg_debug_out [32:0] $end
$var wire 7 " debuger [6:0] $end
$var wire 32 # MEM_OUT [0:31] $end
$var wire 1 $ MEM_CTRL $end
$var wire 12 % MEM_ADDR [11:0] $end
$var wire 12 & INS_ADDR [11:0] $end
$var reg 32 ' INS_MEM [0:31] $end
$var reg 32 ( MEM_IN [0:31] $end
$var reg 1 ) clk $end
$var reg 1 * debug $end
$var reg 1 + rst $end
$var integer 32 , ot_mem [31:0] $end
$var integer 32 - tb_debug [31:0] $end
$scope module cpu $end
$var wire 12 . INS_ADDR [11:0] $end
$var wire 32 / INS_MEM [0:31] $end
$var wire 12 0 MEM_ADDR [11:0] $end
$var wire 1 $ MEM_CTRL $end
$var wire 32 1 MEM_IN [0:31] $end
$var wire 32 2 MEM_OUT [0:31] $end
$var wire 1 ) clk $end
$var wire 1 * debug $end
$var wire 7 3 debuger [6:0] $end
$var wire 1 + rst $end
$var wire 33 4 reg_debug_out [32:0] $end
$var reg 1 5 MEM_C $end
$var reg 12 6 MEM_D [11:0] $end
$var reg 32 7 MEM_O [0:31] $end
$var reg 7 8 debug_r [6:0] $end
$var reg 32 9 ir [31:0] $end
$var reg 12 : pc [11:0] $end
$var reg 5 ; psr [4:0] $end
$var reg 33 < result [32:0] $end
$var reg 32 = src1 [31:0] $end
$var reg 32 > src2 [31:0] $end
$var reg 1 ? temp_checkcond $end
$var integer 32 @ i [31:0] $end
$scope function setcondcode $end
$var reg 33 A res [32:0] $end
$var reg 7 B setcondcode [6:0] $end
$upscope $end
$upscope $end
$scope begin always_INS_ADDR $end
$upscope $end
$scope begin always_MEM_ADDR $end
$upscope $end
$scope begin always_MEM_OUT $end
$upscope $end
$scope begin main_loop $end
$upscope $end
$scope begin monitor $end
$upscope $end
$scope begin prog_load $end
$upscope $end
$scope begin stop $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx B
bx A
bx @
x?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
x5
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
b0 ,
x+
x*
x)
bx (
bx '
bx &
bx %
x$
bx #
bx "
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx !
$end
#1000
b0 !
b0 4
b0 9
b0 '
b0 /
b0 (
b0 1
1*
0)
0+
#50000
b11 "
b11 3
b11 8
0$
05
1)
#100000
0)
#101000
b1 -
b101 (
b101 1
0?
b0 #
b0 2
b0 7
b0 %
b0 0
b0 6
b0 &
b0 .
b0 :
b0 ;
b0 <
b0 >
b0 =
b10000 @
b10 "
b10 3
b10 8
1+
#150000
b10000 @
1)
#200000
0)
#201000
0+
b1010 ,
#250000
b10000000000000000000000000010 '
b10000000000000000000000000010 /
b11 "
b11 3
b11 8
b1 &
b1 .
b1 :
1)
#300000
b10000000000000000000000000010 !
b10000000000000000000000000010 4
b10000000000000000000000000010 9
0)
#350000
b10010000000000000000000000000000 '
b10010000000000000000000000000000 /
b1001 "
b1001 3
b1001 8
1?
b10 &
b10 .
b10 :
1)
#400000
b10010000000000000000000000000000 !
b10010000000000000000000000000000 4
b10010000000000000000000000000000 9
0)
#450000
b1010 ,
b101000000000000000000000000001 '
b101000000000000000000000000001 /
b101 "
b101 3
b101 8
b11 &
b11 .
b11 :
1)
